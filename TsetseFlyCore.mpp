//LABEL(TsetseFlyCore, EN) Core functionality of the TsetseFly actor

/* NOTE(TsetseFlyCore, EN)
	This module contains the basic information which defines the TsetseFly actor.
*/

parameters 
{
	int		StartingPopulationSize; //EN Starting population size
	double PropFemale; //EN Proportion of females
};

classification GENDER
{
	FEMALE,
	MALE
};

actor_set TsetseFly asAllTsetseFly; //EN All TsetseFly actors


actor TsetseFly            //EN Individual
{
	int integer_age = self_scheduling_int(age);

	AGE days_lived = COERCE(AGE,integer_age);

	int integer_time = self_scheduling_int(time);
	
	DAY_NUMBER day_number = COERCE(DAY_NUMBER, integer_time);

	// The states time and age are automatically defined by Modgen.
	// Model-specific labels and notes are supplied below.

	//LABEL(TsetseFly.time, EN) Time
	/*NOTE(TsetseFly.time, EN)
		Time is a continuous quantity in this model.
		A unit of time is a year.
	*/

	//LABEL(TsetseFly.age, EN) Age
	/*NOTE(TsetseFly.age, EN)
		Age is a continuous quantity in this model.
		A unit of age is a year.
	*/

	//EN Report time
	REPORT_TIME report_time = { 0 };

	//EN Alive
	logical alive = {TRUE};
	/*NOTE(TsetseFly.alive, EN)
		Set to TRUE when the actor starts, and to FALSE just before the actor finishes.
		Since the numeric value of TRUE is 1 and FALSE is 0, this variable
		can also be used to count actors in tables.
	*/
	GENDER gender = (RandUniform(2)>PropFemale) ? MALE:FEMALE;

	
	event timeMortalityEvent, MortalityEvent;	//EN Mortality event

	//LABEL(TsetseFly.Start, EN) Starts the actor
	void Start();

	//LABEL(TsetseFly.Finish, EN) Finishes the actor
	void Finish();
};


/*NOTE(TsetseFly.Start, EN)
	The Start function initializes actor variables before simulation
	of the actor commences.
*/
void TsetseFly::Start()
{
	// Modgen initializes all actor variables
	// before the code in this function is executed.

	age = 0;
	time = 0;
	
	// After the code in this function is executed,
	// Modgen initializes events and tables for the actor.
	// Modgen also outputs starting values to the tracking file if requested.
}

/*NOTE(TsetseFly.Finish, EN)
	The Finish function terminates the simulation of an actor.
*/
void TsetseFly::Finish()
{
	// After the code in this function is executed,
	// Modgen removes the actor from tables and from the simulation.
	// Modgen also recuperates any memory used by the actor.
}

/*NOTE(DurationOfLife, EN)
	This table contains statistics related to the duration of life.
*/
table TsetseFly DurationOfLife //EN Duration of Life
{
	gender*
	{
		value_in(alive),				//EN Population size
		min_value_out(duration()),		//EN Minimum duration of life decimals=4
		max_value_out(duration()),		//EN Maximum duration of life decimals=4
		duration() / value_in(alive)	//EN Life expectancy decimals=4

	} //EN Demographic characteristics
};